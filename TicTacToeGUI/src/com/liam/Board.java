packagecom.liam;importjava.util.Date;importjava.util.Random;/*Re-usingoldcodebecauseit'snotworthremakingaclasswiththesamefunctionality*/publicclassBoard{privatestaticCELL_STATE[][]Cells=newCELL_STATE[3][3];enumCELL_STATE{O,X,NONE}Board(){ClearBoard();}/***Clearthegameboard*/publicvoidClearBoard(){for(intx=0;x<=2;x++){for(inty=0;y<=2;y++){Cells[x][y]=CELL_STATE.NONE;}}}/***Setsacellspecifiedbyrowandcoltothegivenstate.*Expectsthatrowandcolhavealreadybeencheckedforvalidity.**@paramrowtherowofthecelltobeset*@paramcolthecolumnofthecelltobeset*@paramstatethestatethatthecellwillbesetto*/publicvoidSetCell(introw,intcol,CELL_STATEstate){assert1<=row&&row<=3;assert1<=col&&col<=3;Cells[row][col]=state;}/***Checksifthegivenplayertypehaswon.**@paramrowtherowofthecelltobechecked*@paramcolthecolumnofthecelltobechecked*@paramplayerthetypeofplayertocheckawinfor*@returnwhethertheplayerhaswonornot*/publicbooleanCheckWin(introw,intcol,CELL_STATEplayer){return((Cells[row][0]==player&&Cells[row][1]==player&&Cells[row][2]==player)||(Cells[0][col]==player&&Cells[1][col]==player&&Cells[2][col]==player)||(row==col&&Cells[0][0]==player&&Cells[1][1]==player&&Cells[2][2]==player)||(row+col==2&&Cells[0][2]==player&&Cells[1][1]==player&&Cells[2][0]==player));}/***MakesachoiceasanAI.AssumestheAIplayerisX.**@return:whethertheAIwonornot*/publicbooleanChooseAI(){RandomRand=newRandom(newDate().getTime());while(true){intx=Rand.nextInt(3);inty=Rand.nextInt(3);if(Cells[x][y]==CELL_STATE.NONE){Cells[x][y]=CELL_STATE.X;returnCheckWin(x,y,CELL_STATE.X);}}}}
